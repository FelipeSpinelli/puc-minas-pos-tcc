@page "/"
@page "/upload"
@using ArquiveSe.App.Services.ArquiveSeApi;
@using ArquiveSe.App.Services.ArquiveSeApi.Contracts.UploadFile;
@using System.Buffers;
@using Microsoft.Extensions.Options;
@inject IArquiveSeApiClient _apiClient;
@inject IOptions<AppSettings> _appSettingsOptions;

<PageTitle>Index</PageTitle>

@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Arraste e solte arquivos ou clique para selecionar</MudText>
                @foreach (var file in _files)
                {
                    <MudChip Color="Color.Dark" Text="@file.Key" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" Disabled="@(!_files.Any())" Color="Color.Primary" Variant="Variant.Filled">Enviar</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!_files.Any())" Color="Color.Error" Variant="Variant.Filled">Limpar</MudButton>
    </MudToolBar>
</MudStack>

<MudDialog @bind-IsVisible="_dialogVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Class="mr-3" /> Arquive-Se - Upload de arquivo
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudAlert Severity="Severity.Success">Arquivo enviado com sucesso!</MudAlert>
        <MudAlert Severity="Severity.Normal">Armazene os valores abaixo. Eles não poderão ser recuperados futuramente!</MudAlert>
        <MudField Label="Link para download" Variant="Variant.Text">@_downloadLink</MudField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => _dialogVisible = false" Class="px-10">Fechar</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private IDictionary<string, byte[]> _files = new Dictionary<string, byte[]>(10);
    private bool _dialogVisible = false;
    private DialogOptions _dialogOptions = new DialogOptions { FullWidth = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
    private string _downloadLink = string.Empty;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            if (_files.Count == 10)
            {
                break;
            }

            var buffer = ArrayPool<byte>.Shared.Rent((int)file.Size);
            file.OpenReadStream().ReadAsync(buffer, 0, (int)file.Size);
            var fileBytes = new byte[buffer.Length];
            buffer.CopyTo(fileBytes, 0);

            _files.Add(file.Name, fileBytes);
            ArrayPool<byte>.Shared.Return(buffer, true);
        }
    }

    private async Task Clear()
    {
        _files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }
    private async Task Upload()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        var uploadRequest = new UploadFileRequest
            {
                Files = _files
            };

        try
        {
            var response = await _apiClient.UploadFile(uploadRequest);
            Snackbar.Add("Arquivos enviados com sucesso!", Severity.Success);
            _downloadLink = $"{_appSettingsOptions.Value.BaseUrl}/download/{response.Id}";

            _dialogVisible = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Falha ao enviar arquivos!", Severity.Error);
        }

        await Clear();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}